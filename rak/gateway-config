#!/bin/bash

export NCURSES_NO_UTF8_ACS=1

source /usr/local/rak/shell_script/rak_common.sh

GATEWAY_CONFIG_INFO=/usr/local/rak/gateway-config-info.json
LORA_PKT_PATH=/opt/ttn-gateway/packet_forwarder/lora_pkt_fwd

rpi_model=`do_get_rpi_model`
INSTALL_CHIRPSTACK=`do_get_gw_install_chirpstack`
GW_MODEL=`do_get_gw_model`
GW_VERSION=`do_get_gw_version`
GW_ID=`do_get_gw_id_from_json`

INSTALL_FROM_IMG=`do_get_gateway_info install_img`
INSTALL_LTE=`do_get_gw_install_lte`

do_if_proc_is_run()
{
    if [ -n "`pgrep $1`" ]; then
        return 0
    else
        return 1
    fi
}

do_check_ipaddr()
{
    echo $1|grep "^[0-9]\{1,3\}\.\([0-9]\{1,3\}\.\)\{2\}[0-9]\{1,3\}$" > /dev/null;
    if [ $? -ne 0 ]
    then
        echo "Bad IP address" 
        return 1
    fi
    ipaddr=$1
    a=`echo $ipaddr|awk -F . '{print $1}'`
    b=`echo $ipaddr|awk -F . '{print $2}'`
    c=`echo $ipaddr|awk -F . '{print $3}'`
    d=`echo $ipaddr|awk -F . '{print $4}'`
    for num in $a $b $c $d
    do
        if [ $num -gt 255 ] || [ $num -lt 0 ] 
        then
            echo "Bad IP address" 
            return 1
        fi
   done

   return 0
}

do_setup_admin_password() {
    dialog --title "Setup pi password" --yesno "You will be asked to enter a new password." 5 60
    RET=$?
    if [ $RET -eq 0 ]; then
        passwd pi
        RET=$?
        if [ $RET -eq 0 ]; then
            dialog --title "Setup pi password" --msgbox "Password has been changed succesfully." 5 60
        fi
    fi
    do_main_menu
}

do_restart_packet_forwarder() {
    systemctl stop ttn-gateway
    systemctl start ttn-gateway
    RET=$?
    if [ $RET -eq 0 ]; then
        dialog --title "Restart packet-forwarder" --msgbox "The packet-forwarder has been restarted." 5 60
    fi
    if [ $# -eq 0 ]; then
        do_main_menu
    fi
}

do_copy_global_conf() {
    cp $LORA_PKT_PATH/global_conf/global_conf.$2.json $LORA_PKT_PATH/global_conf.json

    if [ "$1" = "ttn" ]; then
        dialog --title "Server-plan configuration" --msgbox "Server-plan configuration has been copied." 5 60
        write_json_server_plan 1
        do_ChirpStack stop
        do_ChirpStack disable
    elif [ "$1" = "chirpstack" ]; then
        write_json_server_plan 2
        do_set_lora_server_ip
        if [ "$INSTALL_CHIRPSTACK" = "1" ]; then
            do_set_LoRaServer_adr_disable
            cp /etc/chirpstack-network-server/chirpstack-network-server.$2.toml /etc/chirpstack-network-server/chirpstack-network-server.toml
            do_ChirpStack restart
            do_ChirpStack enable
        fi
    elif [ "$1" = "lorawan" ]; then
        write_json_server_plan 3
        do_set_lora_server_ip
    fi
    do_restart_packet_forwarder 1
}

do_setup_ttn_channel_plan() {
  default_item=1
  if [ "${GW_MODEL}" = "RAK2287" ]; then
    FUN=$(dialog --title "Channel-plan configuration" --default-item $default_item --menu "Channel-plan:" 18 60 12 \
        1 "EU_863_870" \
        2 "US_902_928" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        :
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_copy_global_conf "ttn" "eu_863_870" 4;;
            2) do_copy_global_conf "ttn" "us_902_928" 8;;
        esac
    fi
  else
    FUN=$(dialog --title "Channel-plan configuration" --default-item $default_item --menu "Channel-plan:" 18 60 12 \
        1 "AS_923" \
        2 "AU_915_928" \
        3 "CN_470_510" \
        4 "EU_863_870" \
        5 "IN_865_867" \
        6 "KR_920_923" \
        7 "RU_864_870" \
        8 "US_902_928" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 1 ]; then
        :
    elif [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_copy_global_conf "ttn" "as_923" 1;;
            2) do_copy_global_conf "ttn" "au_915_928" 2;;
            3) do_copy_global_conf "ttn" "cn_470_510" 3;;
            4) do_copy_global_conf "ttn" "eu_863_870" 4;;
            5) do_copy_global_conf "ttn" "in_865_867" 5;;
            6) do_copy_global_conf "ttn" "kr_920_923" 6;;
            7) do_copy_global_conf "ttn" "ru_864_870" 7;;
            8) do_copy_global_conf "ttn" "us_902_928" 8;;
        esac
    fi
  fi
}

do_set_lora_server_ip()
{
    rm /tmp/gate_server_ip -rf
    mkfifo /tmp/gate_server_ip
    default_item=`do_get_gateway_info lora_server.lora_server_ip`
    dialog --title "server IP" --nocancel --inputbox "SERVER_IP:" 10 40 "$default_item" 2> /tmp/gate_server_ip & 
    RET=$?
    if [ $RET -eq 1 ]; then
        echo "error"
    elif [ $RET -eq 0 ]; then
        gate_server_ip="$( cat /tmp/gate_server_ip  )"
        rm /tmp/gate_server_ip
        write_json_lora_server_ip "$gate_server_ip"
        sed -i "s/^.*server_address.*$/\t\"server_address\": \"$gate_server_ip\",/" $LORA_PKT_PATH/global_conf.json
        if [ $rpi_model -eq 3 ] || [ $rpi_model -eq 4 ]; then
            do_check_ip_is_localhost $gate_server_ip
            RET=$?
            if  [ $RET -eq 0 ]; then
                do_ChirpStack enable
                do_ChirpStack restart
            else
                do_ChirpStack disable
                do_ChirpStack stop
            fi
        fi
    fi
}

do_setup_LoRaServer_channel_plan() {
    default_item=1
    if [ "${GW_MODEL}" = "RAK2287" ]; then
      FUN=$(dialog --title "Channel-plan configuration" --default-item $default_item --menu "Channel-plan:" 18 60 12 \
          1 "EU_863_870" \
          2 "US_902_928" \
          3>&1 1>&2 2>&3)
      RET=$?
      if [ $RET -eq 1 ]; then
          :
      elif [ $RET -eq 0 ]; then
          case "$FUN" in
              1) do_copy_global_conf "chirpstack" "eu_863_870" 4;;
              2) do_copy_global_conf "chirpstack" "us_902_928" 8;;
          esac
      fi
    else
      FUN=$(dialog --title "Channel-plan configuration" --default-item $default_item --menu "Channel-plan:" 18 60 12 \
          1 "AS_923" \
          2 "AU_915_928" \
          3 "CN_470_510" \
          4 "EU_433" \
          5 "EU_863_870" \
          6 "IN_865_867" \
          7 "KR_920_923" \
          8 "RU_864_870" \
          9 "US_902_928" \
          3>&1 1>&2 2>&3)
      RET=$?
      if [ $RET -eq 0 ]; then
          case "$FUN" in
              1) do_copy_global_conf "chirpstack" "as_923" 1;;
              2) do_copy_global_conf "chirpstack" "au_915_928" 2;;
              3) do_copy_global_conf "chirpstack" "cn_470_510" 3;;
              4) do_copy_global_conf "chirpstack" "eu_433" 4;;
              5) do_copy_global_conf "chirpstack" "eu_863_870" 5;;
              6) do_copy_global_conf "chirpstack" "in_865_867" 6;;
              7) do_copy_global_conf "chirpstack" "kr_920_923" 7;;
              8) do_copy_global_conf "chirpstack" "ru_864_870" 8;;
              9) do_copy_global_conf "chirpstack" "us_902_928" 9;;
          esac
      fi
    fi
}

do_set_LoRaServer_adr_enable()
{
    write_json_loraserver_adr "1"
    sed -i "s/^.*disable_adr.*$/  disable_adr=false/" /etc/chirpstack-network-server/chirpstack-network-server.toml
    do_ChirpStack restart
}

do_set_LoRaServer_adr_disable()
{
    write_json_loraserver_adr "2"
    sed -i "s/^.*disable_adr.*$/  disable_adr=true/" /etc/chirpstack-network-server/chirpstack-network-server.toml
    do_ChirpStack restart
}

do_set_LoRaServer_adr()
{
    default_item=2
    FUN=$(dialog --title "ChirpStack ADR configuration" --default-item $default_item --menu "ChirpStack ADR configuration:" 18 40 12 \
        1 "Enable ADR" \
        2 "Disable ADR" \
        3>&1 1>&2 2>&3)
    RET=$?
    if [ $RET -eq 0 ]; then
        case "$FUN" in
            1) do_set_LoRaServer_adr_enable;;
            2) do_set_LoRaServer_adr_disable;;
        esac
    fi
}

do_setup_LoRaServer_config()
{
    if [ "$INSTALL_CHIRPSTACK" = "1" ]; then
        default_item=1
        FUN=$(dialog --title "ChirpStack Channel-plan configuration" --default-item $default_item --menu "Server Channel-plan:" 10 60 12 \
            1 "ChirpStack Channel-plan configuration" \
            2 "ChirpStack ADR configure" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_LoRaServer_channel_plan;;
                2) do_set_LoRaServer_adr;;
            esac
        fi
    else
        default_item=1
        FUN=$(dialog --title "Server Channel-plan configuration" --default-item $default_item --menu "Server Channel-plan:" 10 60 12 \
            1 "Server Channel-plan configuration" \
            3>&1 1>&2 2>&3)
        RET=$?
        if [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_LoRaServer_channel_plan;;
            esac
        fi
    fi
}

do_setup_channel_plan() {
    if [ $rpi_model -eq 3 ] || [ $rpi_model -eq 4 ]; then
        default_item=`do_get_gateway_info lora_server.server_plan`

        FUN=$(dialog --title "Server-plan configuration" --default-item $default_item --menu "Select the Server-plan:" 15 60 3 \
            1 "Server is TTN" \
            2 "Server is ChirpStack" \
            3>&1 1>&2 2>&3)
        RET=$?

        if [ $RET -eq 1 ]; then
            :
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_ttn_channel_plan;;
                2) do_setup_LoRaServer_config ;;
            esac
        fi
    else
        FUN=$(dialog --title "Server-plan configuration" --default-item 1 --menu "Select the Server-plan:" 15 60 3 \
            1 "Server is TTN" \
            2 "Server is Other server" \
            3>&1 1>&2 2>&3)
        RET=$?

        if [ $RET -eq 1 ]; then
            :
        elif [ $RET -eq 0 ]; then
            case "$FUN" in
                1) do_setup_ttn_channel_plan;;
                2) do_setup_LoRaServer_config ;;
            esac
        fi
    fi
    do_main_menu
}

do_ChirpStack()
{
    if [ "$INSTALL_CHIRPSTACK" = "1" ]; then
      if [ "$1" = "stop" ] || [ "$1" = "disable" ] || [ "$1" = "enable" ];then
        systemctl $1 chirpstack-network-server
        systemctl $1 chirpstack-application-server
        systemctl $1 chirpstack-gateway-bridge
      elif [ "$1" = "restart" ];then
      	ret=`ps -ef|grep chirpstack-application-server|grep -v grep|wc -l`
        if [ "$ret" = "0" ]; then
          systemctl $1 chirpstack-application-server
        fi
        ret=`ps -ef|grep chirpstack-gateway-bridge|grep -v grep|wc -l`
        if [ "$ret" = "0" ]; then
          systemctl $1 chirpstack-gateway-bridge
        fi
        systemctl $1 chirpstack-network-server
      fi
    fi
}

INTERACTIVE=True

do_configure_lan() {
    GATEWAY_EUI_NIC="eth0"
    if [[ `grep "$GATEWAY_EUI_NIC" /proc/net/dev` == "" ]]; then
        dialog --title "Configure LAN" --msgbox "LAN configuration is not supported on your Raspberry Pi model." 5 66
    else
      rm /tmp/eth0_ip -rf
      mkfifo /tmp/eth0_ip

      rm /tmp/eth0_gw -rf
      mkfifo /tmp/eth0_gw

      # get old ip
      old_eth0_ip=`do_get_gateway_info lan.lan_ip`

      # dialog ip
      dialog --title "Set eth0 IP" --nocancel --inputbox "IP:" 10 40 "$old_eth0_ip" 2> /tmp/eth0_ip & 
      RET=$?

      if [ $RET -eq 1 ]; then
          echo "error"
      elif [ $RET -eq 0 ]; then
          new_eth0_ip="$( cat /tmp/eth0_ip  )" 
          do_check_ipaddr $new_eth0_ip
          RET_IP=$?
          rm /tmp/eth0_ip
      fi

      # get old gw
      old_eth0_gw=`do_get_gateway_info lan.lan_gw`

      # dialog eth0 gw
      dialog --title "Set eth0 route IP" --nocancel --inputbox "Route IP:" 10 40 "$old_eth0_gw" 2> /tmp/eth0_gw & 
      RET=$?

      if [ $RET -eq 1 ]; then
          echo "error"
      elif [ $RET -eq 0 ]; then
          new_eth0_gw="$( cat /tmp/eth0_gw  )" 
          do_check_ipaddr $new_eth0_gw
          RET_GW=$?
          rm /tmp/eth0_gw
      fi
      
      if [ $RET_IP -eq 1 ]; then
          dialog --title "Configure LAN" --msgbox "Invalid IP address." 5 50
      elif [ $RET_GW -eq 1 ]; then
          dialog --title "Configure LAN" --msgbox "Invalid Route IP address." 5 50
      else

          linenum=`sed -n '/RAK_eth0_IP/=' /etc/dhcpcd.conf`
          let line_ip=linenum+2
          let line_gw=linenum+3

          sed -i "${line_ip}cstatic ip_address=${new_eth0_ip}" /etc/dhcpcd.conf
          sed -i "${line_gw}cstatic routers=${new_eth0_gw}" /etc/dhcpcd.conf
          write_json_lan_ip ${new_eth0_ip}
          write_json_lan_gw ${new_eth0_gw}
          dialog --title "Configure LAN" --msgbox "Configure LAN success.Changes will take effect after OS restart." 5 70
      fi
    fi
    do_main_menu
}

do_set_apn_name()
{
    # get old apn
    old_apn=`do_get_gateway_info apn.apn_name`

    # get old baud speed
    old_baud=`do_get_gateway_info apn.apn_baud`

    rm /tmp/apn_name -rf
    mkfifo /tmp/apn_name
    rm /tmp/band_speed -rf
    mkfifo /tmp/band_speed
    dialog --title "APN Name" --nocancel --inputbox "APN Name:" 10 40 "$old_apn" 2> /tmp/apn_name & 
    dialog --title "Baud Speed" --nocancel --inputbox "Baud Speed:" 10 40 "$old_baud" 2> /tmp/band_speed &
    RET=$?

    if [ $RET -eq 1 ]; then
        echo "error"
    elif [ $RET -eq 0 ]; then
        new_apn_name="$( cat /tmp/apn_name  )" 
        new_baud_speed="$( cat /tmp/band_speed  )"

        RET2=`do_check_variable_type $new_baud_speed`
        if [ $RET2 -ne 0 ]; then
            dialog --title "Baud Speed" --msgbox "Invalid baud speed." 5 40
        else
            /usr/local/rak/lte/ppp-creator.sh "${new_apn_name}" ttyAMA0 ${new_baud_speed} >/dev/null
            rm /tmp/apn_name -rf
            rm /tmp/band_speed -rf

            write_json_apn_name $new_apn_name
            write_json_apn_baud $new_baud_speed
        fi
    fi
    do_main_menu
}

do_main_menu() {

    
    if [ "$INSTALL_FROM_IMG" = "1" ]; then
        if [ "$INSTALL_LTE" = "0" ]; then

            FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 16 80 20 \
                1 "Set pi password" \
                2 "Setup RAK Gateway Channel Plan" \
                3 "Restart packet-forwarder" \
                4 "Edit packet-forwarder config" \
                5 "Configure LAN"    \
                3>&1 1>&2 2>&3)
            RET=$?
            if [ $RET -eq 1 ]; then
                clear
                return 0
            elif [ $RET -eq 0 ]; then
                case "$FUN" in
                    1) do_setup_admin_password;;
                    2) do_setup_channel_plan;;
                    3) do_restart_packet_forwarder;;
                    4) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                    5) do_configure_lan;;
                esac
            fi
        else
            FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 19 80 20 \
                1 "Set pi password" \
                2 "Setup RAK Gateway Channel Plan" \
                3 "Restart packet-forwarder" \
                4 "Edit packet-forwarder config" \
                5 "Configure APN name" \
                6 "Configure LAN"    \
                3>&1 1>&2 2>&3)
            RET=$?
            if [ $RET -eq 1 ]; then
                clear
                return 0
            elif [ $RET -eq 0 ]; then
                case "$FUN" in
                    1) do_setup_admin_password;;
                    2) do_setup_channel_plan;;
                    3) do_restart_packet_forwarder;;
                    4) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                    5) do_set_apn_name;;
                    6) do_configure_lan;;
                esac
            fi
        fi
    else
        if [ "$INSTALL_LTE" = "0" ]; then

            FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 16 80 20 \
                1 "Set pi password" \
                2 "Setup RAK Gateway Channel Plan" \
                3 "Restart packet-forwarder" \
                4 "Edit packet-forwarder config" \
                3>&1 1>&2 2>&3)
            RET=$?
            if [ $RET -eq 1 ]; then
                clear
                return 0
            elif [ $RET -eq 0 ]; then
                case "$FUN" in
                    1) do_setup_admin_password;;
                    2) do_setup_channel_plan;;
                    3) do_restart_packet_forwarder;;
                    4) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                esac
            fi

        else

            FUN=$(dialog --title "$GW_MODEL (Gateway ID:$GW_ID  Version: $GW_VERSION)" --cancel-label "Quit" --menu "Configuration options:" 19 80 20 \
                1 "Set pi password" \
                2 "Setup RAK Gateway Channel Plan" \
                3 "Restart packet-forwarder" \
                4 "Edit packet-forwarder config" \
                5 "Configure APN name" \
                3>&1 1>&2 2>&3)
            RET=$?
            if [ $RET -eq 1 ]; then
                clear
                return 0
            elif [ $RET -eq 0 ]; then
                case "$FUN" in
                    1) do_setup_admin_password;;
                    2) do_setup_channel_plan;;
                    3) do_restart_packet_forwarder;;
                    4) nano $LORA_PKT_PATH/global_conf.json && do_main_menu;;
                    5) do_set_apn_name;;
                esac
            fi
        fi
    fi
}

if [ $(id -u) -ne 0 ]; then
  printf "Script must be run as root. Try 'sudo gateway-config'\n"
  exit 1
fi

do_main_menu
